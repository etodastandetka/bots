import logging
import asyncio
import sys
import platform
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows –∏ Python 3.9+
if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
from database_new import db_new
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Ç–∞—Ç–µ–ª—å –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
from bot_database_reader import bot_db_reader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    from config import BOT_TOKENS, ADMIN_ID, API_SETTINGS
    ADMIN_BOT_TOKEN = BOT_TOKENS["admin"]
except ImportError:
    # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ config.py –Ω–µ –Ω–∞–π–¥–µ–Ω
    ADMIN_BOT_TOKEN = "8439194478:AAHF1VVycOeEan9HomdozJ9QfFLtglsjy_I"
    ADMIN_ID = 5474111297
    API_SETTINGS = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=ADMIN_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
BOTS = ['1xbet', 'melbet', 'mostbet']

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_admin_confirmation = State()
    waiting_for_wallet_name = State()
    waiting_for_wallet_qr_hash = State()
    waiting_for_admin_wallet_amount = State()
    waiting_for_admin_wallet_name = State()
    waiting_for_admin_wallet_bank = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return db_new.is_admin(user_id)

def is_main_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º"""
    return db_new.is_main_admin(user_id)

def format_statistics(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['period']}</b>\n\n"
    
    text += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']:,}\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']:,}\n\n"
    
    text += f"üí≥ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_transactions']:,}\n"
    text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {stats['pending_transactions']:,}\n"
    text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_transactions']:,}\n"
    text += f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected_transactions']:,}\n\n"
    
    text += f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
    text += f"‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['deposits_count']:,} ({stats['deposits_amount']:,.2f} KGS)\n"
    text += f"‚Ä¢ –í—ã–≤–æ–¥—ã: {stats['withdrawals_count']:,} ({stats['withdrawals_amount']:,.2f} KGS)\n\n"
    
    if stats['bots_stats']:
        text += f"ü§ñ <b>–ü–æ –±–æ—Ç–∞–º:</b>\n"
        for bot_stat in stats['bots_stats']:
            text += f"‚Ä¢ {bot_stat['bot_name'].upper()}: {bot_stat['total_transactions']:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            text += f"  üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {bot_stat['deposits_amount']:,.2f} KGS\n"
            text += f"  üí∏ –í—ã–≤–æ–¥—ã: {bot_stat['withdrawals_amount']:,.2f} KGS\n\n"
    
    return text

def create_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üí∞ –ö–æ—à–µ–ª–µ–∫")],
            [KeyboardButton(text="üè¶ –ë–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã"), KeyboardButton(text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏")],
            [KeyboardButton(text="üë• –ê–¥–º–∏–Ω—ã"), KeyboardButton(text="üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏")]
        ],
        resize_keyboard=True
    )
    return keyboard

def create_statistics_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
                InlineKeyboardButton(text="üìÖ –í—á–µ—Ä–∞", callback_data="stats_yesterday")
            ],
            [
                InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—è", callback_data="stats_week"),
                InlineKeyboardButton(text="üìÖ –ú–µ—Å—è—Ü", callback_data="stats_month")
            ],
            [
                InlineKeyboardButton(text="üìÖ –í—Å–µ –≤—Ä–µ–º—è", callback_data="stats_all")
            ]
        ]
    )
    return keyboard

def create_bots_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="1xbet", callback_data="bot_1xbet"),
                InlineKeyboardButton(text="1win", callback_data="bot_1win")
            ],
            [
                InlineKeyboardButton(text="Melbet", callback_data="bot_melbet"),
                InlineKeyboardButton(text="Mostbet", callback_data="bot_mostbet")
            ]
        ]
    )
    return keyboard

def create_cash_balance_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="1xbet", callback_data="balance_1xbet"),
                InlineKeyboardButton(text="1win", callback_data="balance_1win")
            ],
            [
                InlineKeyboardButton(text="Melbet", callback_data="balance_melbet"),
                InlineKeyboardButton(text="Mostbet", callback_data="balance_mostbet")
            ]
        ]
    )
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        return
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Lux Kassa</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(welcome_text, reply_markup=create_main_keyboard(), parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /admin
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º
    if is_admin(user_id):
        await message.answer("‚úÖ –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
    if user_id == ADMIN_ID:
        await message.answer("‚úÖ –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="admin_confirm_yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="admin_confirm_no")
            ]
        ]
    )
    
    await message.answer(
        "ü§î –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∞–¥–º–∏–Ω –Ω–∞ —Å–µ–±—è?\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞.",
        reply_markup=keyboard
    )
    
    await state.set_state(AdminStates.waiting_for_admin_confirmation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@dp.callback_query(F.data.startswith("admin_confirm_"))
async def handle_admin_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
    if callback.data == "admin_confirm_yes":
        user_id = callback.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∞
        db_new.add_admin(
            user_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        
        await callback.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        try:
            await bot.send_message(
                ADMIN_ID,
                f"üîî –ù–æ–≤—ã–π –∞–¥–º–∏–Ω: @{callback.from_user.username} (ID: {user_id})"
            )
        except:
            pass
        
    elif callback.data == "admin_confirm_no":
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    text = "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>"
    await message.answer(text, reply_markup=create_statistics_keyboard(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
@dp.callback_query(F.data.startswith("stats_"))
async def handle_statistics(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    period = callback.data.replace("stats_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    stats = bot_db_reader.get_all_bots_stats(period=period)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    text = format_statistics(stats)
    
    await callback.message.edit_text(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ—à–µ–ª–µ–∫"
@dp.message(F.text == "üí∞ –ö–æ—à–µ–ª–µ–∫")
async def wallet_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ—à–µ–ª—å–∫–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
    wallet = db_new.get_active_wallet()
    
    text = "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏</b>\n\n"
    
    if wallet:
        text += f"üí≥ <b>–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:</b>\n"
        text += f"üè¶ –ë–∞–Ω–∫: {wallet['bank_code']}\n"
        text += f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {wallet['recipient_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí≥ –°—É–º–º–∞: {wallet['amount']:,.2f} KGS\n"
        text += f"üì± QR: {wallet['qr_hash'][:20]}...\n\n"
    else:
        text += "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_add")],
            [InlineKeyboardButton(text="‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_list")]
        ]
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã"
@dp.message(F.text == "üè¶ –ë–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã")
async def cash_balance_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    text = "üè¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã:</b>"
    await message.answer(text, reply_markup=create_cash_balance_keyboard(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã –ø–æ –±–æ—Ç–∞–º
@dp.callback_query(F.data.startswith("balance_"))
async def handle_cash_balance(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã –ø–æ –±–æ—Ç–∞–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    bot_name = callback.data.replace("balance_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
    balance = bot_db_reader.get_bot_balance(bot_name)
    
    text = f"üè¶ <b>–ë–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã {bot_name.upper()}:</b>\n\nüí∞ {balance:,.2f} KGS"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"balance_update_{bot_name}")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_bot_{bot_name}")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏"
@dp.message(F.text == "ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏")
async def bots_management_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    text = "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>"
    await message.answer(text, reply_markup=create_bots_keyboard(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
@dp.callback_query(F.data.startswith("bot_"))
async def handle_bot_management(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    bot_name = callback.data.replace("bot_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    settings = db_new.get_bot_settings(bot_name)
    
    if settings:
        status_emoji = "üü¢" if settings['is_active'] else "üî¥"
        pause_emoji = "‚è∏Ô∏è" if settings['is_paused'] else "‚ñ∂Ô∏è"
        
        text = (
            f"ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º {bot_name.upper()}</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if settings['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            f"–ü–∞—É–∑–∞: {pause_emoji} {'–ù–∞ –ø–∞—É–∑–µ' if settings['is_paused'] else '–†–∞–±–æ—Ç–∞–µ—Ç'}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—É–∑—ã: {settings['pause_message'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}"
        )
    else:
        text = f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_name.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"bot_activate_{bot_name}"),
                InlineKeyboardButton(text="üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"bot_deactivate_{bot_name}")
            ],
            [
                InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f"bot_pause_{bot_name}"),
                InlineKeyboardButton(text="‚ñ∂Ô∏è –°–Ω—è—Ç—å –ø–∞—É–∑—É", callback_data=f"bot_unpause_{bot_name}")
            ],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_bot_{bot_name}")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–¥–º–∏–Ω—ã"
@dp.message(F.text == "üë• –ê–¥–º–∏–Ω—ã")
async def admins_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    admins = db_new.get_all_admins()
    
    if admins:
        text = "üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n\n"
        
        for admin in admins:
            crown = "üëë" if admin['is_main_admin'] else "üë§"
            username = admin['username'] or "–ë–µ–∑ username"
            name = f"{admin['first_name'] or ''} {admin['last_name'] or ''}".strip() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            text += f"{crown} <b>{username}</b>\n"
            text += f"   –ò–º—è: {name}\n"
            text += f"   ID: {admin['user_id']}\n"
            text += f"   –î–æ–±–∞–≤–ª–µ–Ω: {admin['created_at'][:10]}\n\n"
    else:
        text = "‚ùå –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_remove")]
        ]
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏"
@dp.message(F.text == "üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏")
async def pending_requests_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    pending_transactions = bot_db_reader.get_pending_transactions(limit=10)
    
    if pending_transactions:
        text = "üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        
        for i, trans in enumerate(pending_transactions[:5], 1):
            emoji = "üí≥" if trans['trans_type'] == 'deposit' else "üí∞"
            text += f"{i}. {emoji} <b>{trans['trans_type'].title()}</b>\n"
            text += f"   –°—É–º–º–∞: {trans['amount']:,.2f} KGS\n"
            text += f"   –ë–æ—Ç: {trans['bot_name']}\n"
            text += f"   ID: {trans['user_id']}\n"
            text += f"   –í—Ä–µ–º—è: {trans['created_at'][:16]}\n\n"
        
        if len(pending_transactions) > 5:
            text += f"... –∏ –µ—â–µ {len(pending_transactions) - 5} –∑–∞—è–≤–æ–∫"
    else:
        text = "‚úÖ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pending_refresh")],
            [InlineKeyboardButton(text="üìä –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="pending_all")]
        ]
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫
@dp.callback_query(F.data == "pending_refresh")
async def handle_pending_refresh(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    pending_transactions = bot_db_reader.get_pending_transactions(limit=10)
    
    if pending_transactions:
        text = "üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        
        for i, trans in enumerate(pending_transactions[:5], 1):
            emoji = "üí≥" if trans['trans_type'] == 'deposit' else "üí∞"
            text += f"{i}. {emoji} <b>{trans['trans_type'].title()}</b>\n"
            text += f"   –°—É–º–º–∞: {trans['amount']:,.2f} KGS\n"
            text += f"   –ë–æ—Ç: {trans['bot_name']}\n"
            text += f"   ID: {trans['user_id']}\n"
            text += f"   –í—Ä–µ–º—è: {trans['created_at'][:16]}\n\n"
        
        if len(pending_transactions) > 5:
            text += f"... –∏ –µ—â–µ {len(pending_transactions) - 5} –∑–∞—è–≤–æ–∫"
    else:
        text = "‚úÖ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pending_refresh")],
            [InlineKeyboardButton(text="üìä –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="pending_all")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º –±–æ—Ç–æ–≤
@dp.callback_query(F.data.startswith("bot_activate_"))
async def handle_bot_activate(callback: types.CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    bot_name = callback.data.replace("bot_activate_", "")
    db_new.update_bot_settings(bot_name, is_active=True, is_paused=False)
    
    await callback.answer(f"‚úÖ –ë–æ—Ç {bot_name.upper()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    await handle_bot_management(callback)

@dp.callback_query(F.data.startswith("bot_deactivate_"))
async def handle_bot_deactivate(callback: types.CallbackQuery):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    bot_name = callback.data.replace("bot_deactivate_", "")
    db_new.update_bot_settings(bot_name, is_active=False)
    
    await callback.answer(f"üî¥ –ë–æ—Ç {bot_name.upper()} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    await handle_bot_management(callback)

@dp.callback_query(F.data.startswith("bot_pause_"))
async def handle_bot_pause(callback: types.CallbackQuery):
    """–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –Ω–∞ –ø–∞—É–∑—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    bot_name = callback.data.replace("bot_pause_", "")
    db_new.update_bot_settings(bot_name, is_paused=True, pause_message="–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    await callback.answer(f"‚è∏Ô∏è –ë–æ—Ç {bot_name.upper()} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")
    await handle_bot_management(callback)

@dp.callback_query(F.data.startswith("bot_unpause_"))
async def handle_bot_unpause(callback: types.CallbackQuery):
    """–°–Ω—è—Ç–∏–µ –±–æ—Ç–∞ —Å –ø–∞—É–∑—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    bot_name = callback.data.replace("bot_unpause_", "")
    db_new.update_bot_settings(bot_name, is_paused=False)
    
    await callback.answer(f"‚ñ∂Ô∏è –ë–æ—Ç {bot_name.upper()} —Å–Ω—è—Ç —Å –ø–∞—É–∑—ã")
    await handle_bot_management(callback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã
@dp.callback_query(F.data.startswith("balance_update_"))
async def handle_balance_update(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    bot_name = callback.data.replace("balance_update_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
    balance = bot_db_reader.get_bot_balance(bot_name)
    
    text = f"üè¶ <b>–ë–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã {bot_name.upper()}:</b>\n\nüí∞ {balance:,.2f} KGS"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"balance_update_{bot_name}")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_bot_{bot_name}")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–æ—Ç—É
@dp.callback_query(F.data.startswith("stats_bot_"))
async def handle_bot_statistics(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–æ—Ç—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    bot_name = callback.data.replace("stats_bot_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    stats = bot_db_reader.get_bot_stats(bot_name, period="all")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ {bot_name.upper()}</b>\n\n"
    
    text += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']:,}\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']:,}\n\n"
    
    text += f"üí≥ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_transactions']:,}\n"
    text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {stats['pending_transactions']:,}\n"
    text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_transactions']:,}\n"
    text += f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected_transactions']:,}\n\n"
    
    text += f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
    text += f"‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['deposits_count']:,} ({stats['deposits_amount']:,.2f} KGS)\n"
    text += f"‚Ä¢ –í—ã–≤–æ–¥—ã: {stats['withdrawals_count']:,} ({stats['withdrawals_amount']:,.2f} KGS)\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"bot_{bot_name}")],
            [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_all")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞
@dp.callback_query(F.data == "admin_wallet")
async def handle_admin_wallet(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    admin_wallet = db_new.get_admin_wallet()
    
    if admin_wallet:
        text = (
            f"üëë <b>–ö–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∞</b>\n\n"
            f"üè¶ –ë–∞–Ω–∫: {admin_wallet['bank_code']}\n"
            f"üë§ –ò–º—è: {admin_wallet['name']}\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å: {admin_wallet['amount']:,.2f} KGS\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {admin_wallet['created_at'][:10]}"
        )
    else:
        text = "‚ùå –ö–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="admin_wallet_create")],
            [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_wallet_balance")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="wallet_back")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞
@dp.callback_query(F.data == "admin_wallet_create")
async def handle_admin_wallet_create(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    await callback.message.edit_text(
        "üëë <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: DEMIRBANK, OPTIMABANK):",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_admin_wallet_bank)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–∞–Ω–∫–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞
@dp.message(AdminStates.waiting_for_admin_wallet_bank)
async def handle_admin_wallet_bank(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–∞–Ω–∫–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        await state.clear()
        return
    
    await state.update_data(bank_code=message.text)
    
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞:",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_admin_wallet_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞
@dp.message(AdminStates.waiting_for_admin_wallet_name)
async def handle_admin_wallet_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        await state.clear()
        return
    
    data = await state.get_data()
    bank_code = data.get('bank_code')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∞
    db_new.save_admin_wallet(name=message.text, bank_code=bank_code)
    
    await message.answer(
        f"‚úÖ <b>–ö–æ—à–µ–ª–µ–∫ –∞–¥–º–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üè¶ –ë–∞–Ω–∫: {bank_code}\n"
        f"üë§ –ò–º—è: {message.text}\n"
        f"üí≥ –ë–∞–ª–∞–Ω—Å: 0.00 KGS",
        parse_mode="HTML",
        reply_markup=create_main_keyboard()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞
@dp.callback_query(F.data == "admin_wallet_balance")
async def handle_admin_wallet_balance(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    await callback.message.edit_text(
        "üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_admin_wallet_amount)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞
@dp.message(AdminStates.waiting_for_admin_wallet_amount)
async def handle_admin_wallet_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        await state.clear()
        return
    
    try:
        amount = float(message.text)
        if amount < 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000.50)",
            parse_mode="HTML"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞
    db_new.update_admin_wallet_amount(amount)
    
    await message.answer(
        f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {amount:,.2f} KGS",
        parse_mode="HTML",
        reply_markup=create_main_keyboard()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ—à–µ–ª—å–∫–∞–º
@dp.callback_query(F.data == "wallet_back")
async def handle_wallet_back(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ—à–µ–ª—å–∫–∞–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
    wallet = db_new.get_active_wallet()
    
    text = "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏</b>\n\n"
    
    if wallet:
        text += f"üí≥ <b>–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:</b>\n"
        text += f"üè¶ –ë–∞–Ω–∫: {wallet['bank_code']}\n"
        text += f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {wallet['recipient_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí≥ –°—É–º–º–∞: {wallet['amount']:,.2f} KGS\n"
        text += f"üì± QR: {wallet['qr_hash'][:20]}...\n\n"
    else:
        text += "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_add")],
            [InlineKeyboardButton(text="‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_list")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
@dp.callback_query(F.data == "wallet_add")
async def handle_wallet_add(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    text = "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
    text += "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="wallet_back")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminStates.waiting_for_wallet_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
@dp.callback_query(F.data == "wallet_list")
async def handle_wallet_list(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏
    wallets = db_new.get_all_wallets()
    active_wallet = db_new.get_active_wallet()
    
    if not wallets:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤</b>\n\n‚ùå –ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="wallet_back")]
            ]
        )
    else:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤</b>\n\n"
        keyboard_buttons = []
        
        for wallet in wallets:
            is_active = active_wallet and active_wallet['id'] == wallet['id']
            status_emoji = "üü¢" if is_active else "‚ö™"
            button_text = f"{status_emoji} {wallet['name']} ({wallet['bank_code']})"
            
            if is_active:
                keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"wallet_info_{wallet['id']}")])
            else:
                keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"wallet_activate_{wallet['id']}")])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="wallet_back")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
@dp.callback_query(F.data.startswith("wallet_activate_"))
async def handle_wallet_activate(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    wallet_id = int(callback.data.replace("wallet_activate_", ""))
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫
    db_new.set_wallet_active(wallet_id, True)
    
    await callback.answer("‚úÖ –ö–æ—à–µ–ª–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤
    await handle_wallet_list(callback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ
@dp.callback_query(F.data.startswith("wallet_info_"))
async def handle_wallet_info(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    wallet_id = int(callback.data.replace("wallet_info_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
    wallets = db_new.get_all_wallets()
    wallet = next((w for w in wallets if w['id'] == wallet_id), None)
    
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = f"üí≥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ</b>\n\n"
    text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {wallet['name']}\n"
    text += f"üè¶ –ë–∞–Ω–∫: {wallet['bank_code']}\n"
    text += f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {wallet['recipient_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    text += f"üí≥ –°—É–º–º–∞: {wallet['amount']:,.2f} KGS\n"
    text += f"üì± QR: {wallet['qr_hash'][:20]}...\n"
    text += f"üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="wallet_list")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
@dp.message(AdminStates.waiting_for_wallet_name)
async def handle_wallet_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        await state.clear()
        return
    
    await state.update_data(wallet_name=message.text)
    
    text = "üì± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
    text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {message.text}\n\n"
    text += "üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ QR-—Ö—ç—à –∫–æ—à–µ–ª—å–∫–∞:"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="wallet_back")]
        ]
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminStates.waiting_for_wallet_qr_hash)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ QR-—Ö—ç—à–∞ –∫–æ—à–µ–ª—å–∫–∞
@dp.message(AdminStates.waiting_for_wallet_qr_hash)
async def handle_wallet_qr(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ QR-—Ö—ç—à–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–Ω–∫ –∏–∑ QR —Ö—ç—à–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É)
        bank_code = "OPTIMA"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if "demir" in message.text.lower():
            bank_code = "DEMIR"
        elif "optima" in message.text.lower():
            bank_code = "OPTIMA"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        wallet_id = db_new.save_wallet(
            name=data['wallet_name'],
            qr_hash=message.text,
            bank_code=bank_code,
            recipient_name=None,
            amount=0.0
        )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–æ—à–µ–ª–µ–∫, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
        wallets = db_new.get_all_wallets()
        if len(wallets) == 1:
            db_new.set_wallet_active(wallet_id, True)
        
        text = "‚úÖ <b>–ö–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['wallet_name']}\n"
        text += f"üè¶ –ë–∞–Ω–∫: {bank_code}\n"
        text += f"üì± QR-—Ö—ç—à: {message.text[:30]}...\n"
        if len(wallets) == 1:
            text += f"üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π (–ø–µ—Ä–≤—ã–π –∫–æ—à–µ–ª–µ–∫)\n"
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallet_back")]
            ]
        )
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:</b>\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="wallet_back")]]
            ),
            parse_mode="HTML"
        )
    
    await state.clear()

# –£–¥–∞–ª–µ–Ω–Ω—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —É–ø—Ä–æ—â–µ–Ω–æ

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try:
        db_new.init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
